/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:21:33 GMT 2020
 */

package com.capitalone.dashboard.response;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.capitalone.dashboard.response.RallyBurnDownResponse;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RallyBurnDownResponse_ESTest extends RallyBurnDownResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      rallyBurnDownResponse0.setTotalTaskEstimate(linkedList0);
      List<Double> list0 = rallyBurnDownResponse0.getTotalTaskEstimate();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-1.0));
      linkedList0.push(double0);
      rallyBurnDownResponse0.setTotalTaskEstimate(linkedList0);
      List<Double> list0 = rallyBurnDownResponse0.getTotalTaskEstimate();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      rallyBurnDownResponse0.setToDoHours(linkedList0);
      List<String> list0 = rallyBurnDownResponse0.getToDoHours();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("&x");
      rallyBurnDownResponse0.setToDoHours(linkedList0);
      List<String> list0 = rallyBurnDownResponse0.getToDoHours();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      rallyBurnDownResponse0.setIterationDates(linkedList0);
      List<String> list0 = rallyBurnDownResponse0.getIterationDates();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("&x");
      rallyBurnDownResponse0.setIterationDates(linkedList0);
      List<String> list0 = rallyBurnDownResponse0.getIterationDates();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      rallyBurnDownResponse0.setAcceptedPoints(linkedList0);
      List<Double> list0 = rallyBurnDownResponse0.getAcceptedPoints();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-901.0));
      linkedList0.add(double0);
      rallyBurnDownResponse0.setAcceptedPoints(linkedList0);
      List<Double> list0 = rallyBurnDownResponse0.getAcceptedPoints();
      assertTrue(list0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = linkedList0.subList(0, 0);
      linkedList0.add("");
      rallyBurnDownResponse0.setIterationDates(list0);
      // Undeclared exception!
      try { 
        rallyBurnDownResponse0.toString();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      String string0 = rallyBurnDownResponse0.toString();
      assertEquals("RallyBurnDownResponse [iterationDates=null, toDoHours=null, acceptedPoints=null]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      List<Double> list0 = rallyBurnDownResponse0.getAcceptedPoints();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      List<Double> list0 = rallyBurnDownResponse0.getTotalTaskEstimate();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      List<String> list0 = rallyBurnDownResponse0.getIterationDates();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RallyBurnDownResponse rallyBurnDownResponse0 = new RallyBurnDownResponse();
      List<String> list0 = rallyBurnDownResponse0.getToDoHours();
      assertNull(list0);
  }
}
