/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:27:31 GMT 2020
 */

package com.capitalone.dashboard.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.model.PolicyScanMetric;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolicyScanMetric_ESTest extends PolicyScanMetric_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer((-833));
      policyScanMetric0.setPolimoderateCount(integer0);
      Integer integer1 = policyScanMetric0.getPolimoderateCount();
      assertEquals((-833), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = Integer.getInteger("2n6EW*le R", 0);
      policyScanMetric0.setPolimoderateCount(integer0);
      Integer integer1 = policyScanMetric0.getPolimoderateCount();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer(550);
      policyScanMetric0.setPolimoderateCount(integer0);
      Integer integer1 = policyScanMetric0.getPolimoderateCount();
      assertEquals(550, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer(0);
      policyScanMetric0.setPolicysevereCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicysevereCount();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer((-2448));
      policyScanMetric0.setPolicysevereCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicysevereCount();
      assertEquals((-2448), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer(1436);
      policyScanMetric0.setPolicysevereCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicysevereCount();
      assertEquals(1436, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = Integer.getInteger((String) null, 108);
      policyScanMetric0.setPolicycriticalCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicycriticalCount();
      assertEquals(108, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer(0);
      policyScanMetric0.setPolicycriticalCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicycriticalCount();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer((-2448));
      policyScanMetric0.setPolicycriticalCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicycriticalCount();
      assertEquals((-2448), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = Integer.valueOf((-1553));
      policyScanMetric0.setPolicycriticalCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicycriticalCount();
      assertEquals((-1553), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer(0);
      policyScanMetric0.setPolicyAffectedCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicyAffectedCount();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer((-2039));
      policyScanMetric0.setPolicyAffectedCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicyAffectedCount();
      assertEquals((-2039), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = new Integer(1436);
      policyScanMetric0.setPolicyAffectedCount(integer0);
      Integer integer1 = policyScanMetric0.getPolicyAffectedCount();
      assertEquals(1436, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = policyScanMetric0.getPolimoderateCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = policyScanMetric0.getPolicycriticalCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = policyScanMetric0.getPolicyAffectedCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PolicyScanMetric policyScanMetric0 = new PolicyScanMetric();
      Integer integer0 = policyScanMetric0.getPolicysevereCount();
      assertNull(integer0);
  }
}
