/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:41:40 GMT 2020
 */

package com.capitalone.dashboard.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.model.TestCapability;
import com.capitalone.dashboard.model.TestCaseStatus;
import com.capitalone.dashboard.model.TestSuite;
import com.capitalone.dashboard.model.TestSuiteType;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestCapability_ESTest extends TestCapability_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setUrl("O8c~Qv.RMQ'mEKH");
      String string0 = testCapability0.getUrl();
      assertEquals("O8c~Qv.RMQ'mEKH", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setUrl("");
      String string0 = testCapability0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setUnknownStatusTestSuiteCount(1);
      int int0 = testCapability0.getUnknownStatusTestSuiteCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setUnknownStatusTestSuiteCount((-790));
      int int0 = testCapability0.getUnknownStatusTestSuiteCount();
      assertEquals((-790), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      TestSuiteType testSuiteType0 = TestSuiteType.Regression;
      testCapability0.setType(testSuiteType0);
      TestSuiteType testSuiteType1 = testCapability0.getType();
      assertEquals(TestSuiteType.Regression, testSuiteType1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setTotalTestSuiteCount(1390);
      int int0 = testCapability0.getTotalTestSuiteCount();
      assertEquals(1390, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setTotalTestSuiteCount((-2161));
      int int0 = testCapability0.getTotalTestSuiteCount();
      assertEquals((-2161), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setToolType("");
      String string0 = testCapability0.getToolType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setTimestamp(3768L);
      long long0 = testCapability0.getTimestamp();
      assertEquals(3768L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setTimestamp((-914L));
      long long0 = testCapability0.getTimestamp();
      assertEquals((-914L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setTestSuites((Collection<TestSuite>) null);
      Collection<TestSuite> collection0 = testCapability0.getTestSuites();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setTestSetName("lJ");
      String string0 = testCapability0.getTestSetName();
      assertEquals("lJ", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setTestSetName("");
      String string0 = testCapability0.getTestSetName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setTags((Collection<String>) null);
      Collection<String> collection0 = testCapability0.getTags();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setSuccessTestSuiteCount(2410);
      int int0 = testCapability0.getSuccessTestSuiteCount();
      assertEquals(2410, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setSuccessTestSuiteCount((-377));
      int int0 = testCapability0.getSuccessTestSuiteCount();
      assertEquals((-377), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      TestCaseStatus testCaseStatus0 = TestCaseStatus.Failure;
      testCapability0.setStatus(testCaseStatus0);
      TestCaseStatus testCaseStatus1 = testCapability0.getStatus();
      assertSame(testCaseStatus1, testCaseStatus0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setStartTime(1L);
      long long0 = testCapability0.getStartTime();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setStartTime((-1002L));
      long long0 = testCapability0.getStartTime();
      assertEquals((-1002L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setSkippedTestSuiteCount(2410);
      int int0 = testCapability0.getSkippedTestSuiteCount();
      assertEquals(2410, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setSkippedTestSuiteCount((-1));
      int int0 = testCapability0.getSkippedTestSuiteCount();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setFailedTestSuiteCount(2483);
      int int0 = testCapability0.getFailedTestSuiteCount();
      assertEquals(2483, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setFailedTestSuiteCount((-895));
      int int0 = testCapability0.getFailedTestSuiteCount();
      assertEquals((-895), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setExecutionId(".AK");
      String string0 = testCapability0.getExecutionId();
      assertEquals(".AK", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setExecutionId("");
      String string0 = testCapability0.getExecutionId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setEndTime(247L);
      long long0 = testCapability0.getEndTime();
      assertEquals(247L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setEndTime((-1393L));
      long long0 = testCapability0.getEndTime();
      assertEquals((-1393L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setDuration(520L);
      long long0 = testCapability0.getDuration();
      assertEquals(520L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setDuration((-102L));
      long long0 = testCapability0.getDuration();
      assertEquals((-102L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setDescription("91q?cU-z|#");
      String string0 = testCapability0.getDescription();
      assertEquals("91q?cU-z|#", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setDescription("");
      String string0 = testCapability0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      long long0 = testCapability0.getDuration();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      String string0 = testCapability0.getTestSetName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      int int0 = testCapability0.getSuccessTestSuiteCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      int int0 = testCapability0.getSkippedTestSuiteCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      int int0 = testCapability0.getTotalTestSuiteCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      int int0 = testCapability0.getFailedTestSuiteCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      long long0 = testCapability0.getTimestamp();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.getType();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      int int0 = testCapability0.getUnknownStatusTestSuiteCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      String string0 = testCapability0.getExecutionId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.getStatus();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      Collection<String> collection0 = testCapability0.getTags();
      testCapability0.setTags(collection0);
      assertNull(testCapability0.getExecutionId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      testCapability0.setToolType("rLDmIL\"pd:+MZHYS)");
      String string0 = testCapability0.getToolType();
      assertEquals("rLDmIL\"pd:+MZHYS)", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      String string0 = testCapability0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      String string0 = testCapability0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      long long0 = testCapability0.getStartTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      long long0 = testCapability0.getEndTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      String string0 = testCapability0.getToolType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestCapability testCapability0 = new TestCapability();
      Collection<TestSuite> collection0 = testCapability0.getTestSuites();
      testCapability0.setTestSuites(collection0);
      assertEquals(0, testCapability0.getFailedTestSuiteCount());
  }
}
