/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 14:12:22 GMT 2020
 */

package com.capitalone.dashboard.model.score.settings;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.model.score.settings.PropagateType;
import com.capitalone.dashboard.model.score.settings.ScoreThresholdSettings;
import com.capitalone.dashboard.model.score.settings.ScoreTypeValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScoreThresholdSettings_ESTest extends ScoreThresholdSettings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      Double double0 = new Double(0.0);
      scoreThresholdSettings0.setValue(double0);
      Double double1 = scoreThresholdSettings0.getValue();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      Double double0 = new Double(1.0);
      scoreThresholdSettings0.setValue(double0);
      Double double1 = scoreThresholdSettings0.getValue();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      Double double0 = new Double((-75.44311));
      scoreThresholdSettings0.setValue(double0);
      Double double1 = scoreThresholdSettings0.getValue();
      assertEquals((-75.44311), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.noScore();
      scoreThresholdSettings0.setScore(scoreTypeValue0);
      ScoreTypeValue scoreTypeValue1 = scoreThresholdSettings0.getScore();
      assertSame(scoreTypeValue1, scoreTypeValue0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      Integer integer0 = new Integer(0);
      scoreThresholdSettings0.setNumDaysToCheck(integer0);
      Integer integer1 = scoreThresholdSettings0.getNumDaysToCheck();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      Integer integer0 = new Integer(2);
      scoreThresholdSettings0.setNumDaysToCheck(integer0);
      Integer integer1 = scoreThresholdSettings0.getNumDaysToCheck();
      assertEquals(2, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      Integer integer0 = new Integer((-775));
      scoreThresholdSettings0.setNumDaysToCheck(integer0);
      Integer integer1 = scoreThresholdSettings0.getNumDaysToCheck();
      assertEquals((-775), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      ScoreTypeValue scoreTypeValue0 = scoreThresholdSettings0.getScore();
      assertNull(scoreTypeValue0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.zeroScore();
      scoreThresholdSettings0.setScore(scoreTypeValue0);
      ScoreTypeValue scoreTypeValue1 = scoreThresholdSettings0.getScore();
      assertEquals(PropagateType.no, scoreTypeValue1.getPropagate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      ScoreThresholdSettings.ValueType scoreThresholdSettings_ValueType0 = scoreThresholdSettings0.getType();
      assertEquals(ScoreThresholdSettings.ValueType.percent, scoreThresholdSettings_ValueType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      ScoreThresholdSettings.ValueType scoreThresholdSettings_ValueType0 = ScoreThresholdSettings.ValueType.percent;
      scoreThresholdSettings0.setType(scoreThresholdSettings_ValueType0);
      assertEquals(ScoreThresholdSettings.ComparatorType.less_or_equal, scoreThresholdSettings0.getComparator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      Double double0 = scoreThresholdSettings0.getValue();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      ScoreThresholdSettings.ComparatorType scoreThresholdSettings_ComparatorType0 = scoreThresholdSettings0.getComparator();
      assertEquals(ScoreThresholdSettings.ComparatorType.less_or_equal, scoreThresholdSettings_ComparatorType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      ScoreThresholdSettings.ComparatorType scoreThresholdSettings_ComparatorType0 = ScoreThresholdSettings.ComparatorType.greater;
      scoreThresholdSettings0.setComparator(scoreThresholdSettings_ComparatorType0);
      assertEquals(ScoreThresholdSettings.ValueType.percent, scoreThresholdSettings0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      Integer integer0 = scoreThresholdSettings0.getNumDaysToCheck();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = ScoreThresholdSettings.cloneScoreThresholdSettings((ScoreThresholdSettings) null);
      assertNull(scoreThresholdSettings0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      String string0 = scoreThresholdSettings0.toString();
      assertEquals("ScoreThresholdSettings{comparator=less_or_equal, type=percent, score=null, numDaysToCheck=null, value=null}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScoreThresholdSettings scoreThresholdSettings0 = new ScoreThresholdSettings();
      ScoreThresholdSettings scoreThresholdSettings1 = ScoreThresholdSettings.cloneScoreThresholdSettings(scoreThresholdSettings0);
      assertNotSame(scoreThresholdSettings1, scoreThresholdSettings0);
  }
}
