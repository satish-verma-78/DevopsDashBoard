/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:34:21 GMT 2020
 */

package com.capitalone.dashboard.model.score.settings;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.model.score.settings.PropagateType;
import com.capitalone.dashboard.model.score.settings.ScoreType;
import com.capitalone.dashboard.model.score.settings.ScoreTypeValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScoreTypeValue_ESTest extends ScoreTypeValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(1520.934831);
      ScoreTypeValue scoreTypeValue0 = new ScoreTypeValue(double0);
      Double double1 = scoreTypeValue0.getScoreValue();
      assertEquals(1520.934831, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double((-1222.3019180404508));
      ScoreTypeValue scoreTypeValue0 = new ScoreTypeValue(double0);
      Double double1 = scoreTypeValue0.getScoreValue();
      assertEquals((-1222.3019180404508), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = new ScoreTypeValue();
      scoreTypeValue0.setScoreType((ScoreType) null);
      scoreTypeValue0.getScoreType();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.zeroScore();
      Double double0 = scoreTypeValue0.getScoreValue();
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.noScore();
      Double double0 = scoreTypeValue0.getScoreValue();
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.noScore();
      scoreTypeValue0.setScoreType((ScoreType) null);
      Double double0 = scoreTypeValue0.getScoreValue();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = new ScoreTypeValue();
      PropagateType propagateType0 = PropagateType.dashboard;
      scoreTypeValue0.setPropagate(propagateType0);
      assertEquals(PropagateType.dashboard, scoreTypeValue0.getPropagate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.noScore();
      PropagateType propagateType0 = scoreTypeValue0.getPropagate();
      assertEquals(PropagateType.no, propagateType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.noScore();
      ScoreType scoreType0 = scoreTypeValue0.getScoreType();
      assertEquals(ScoreType.no_score, scoreType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = new ScoreTypeValue();
      Double double0 = new Double((-1416.7970468739898));
      scoreTypeValue0.setScoreValue(double0);
      assertEquals((-1416.7970468739898), scoreTypeValue0.getScoreValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.zeroScore();
      ScoreTypeValue scoreTypeValue1 = ScoreTypeValue.cloneScoreTypeValue(scoreTypeValue0);
      assertEquals(0.0, scoreTypeValue1.getScoreValue(), 0.01);
      assertNotSame(scoreTypeValue1, scoreTypeValue0);
      assertEquals(ScoreType.zero_score, scoreTypeValue1.getScoreType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.noScore();
      ScoreTypeValue scoreTypeValue1 = ScoreTypeValue.cloneScoreTypeValue(scoreTypeValue0);
      assertEquals(0.0, scoreTypeValue1.getScoreValue(), 0.01);
      assertNotSame(scoreTypeValue1, scoreTypeValue0);
      assertTrue(scoreTypeValue1.isNoScore());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.cloneScoreTypeValue((ScoreTypeValue) null);
      assertNull(scoreTypeValue0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.zeroScore();
      boolean boolean0 = scoreTypeValue0.isNoScore();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScoreTypeValue scoreTypeValue0 = ScoreTypeValue.noScore();
      boolean boolean0 = scoreTypeValue0.isNoScore();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double((-1222.3019180404508));
      ScoreTypeValue scoreTypeValue0 = new ScoreTypeValue(double0);
      String string0 = scoreTypeValue0.toString();
      assertEquals("ScoreTypeValue{scoreType=value_percent, scoreValue=-1222.3019180404508, propagate=no}", string0);
  }
}
