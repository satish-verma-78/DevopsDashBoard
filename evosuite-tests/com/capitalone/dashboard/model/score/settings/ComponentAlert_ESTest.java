/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:57:46 GMT 2020
 */

package com.capitalone.dashboard.model.score.settings;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.model.score.settings.ComponentAlert;
import com.capitalone.dashboard.model.score.settings.ScoreThresholdSettings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComponentAlert_ESTest extends ComponentAlert_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ComponentAlert componentAlert0 = new ComponentAlert();
      Double double0 = new Double(1.0);
      componentAlert0.setValue(double0);
      Double double1 = componentAlert0.getValue();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ComponentAlert componentAlert0 = new ComponentAlert();
      Double double0 = new Double(0.0);
      componentAlert0.setValue(double0);
      Double double1 = componentAlert0.getValue();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ComponentAlert componentAlert0 = new ComponentAlert();
      Double double0 = new Double((-2253.9317249));
      componentAlert0.setValue(double0);
      Double double1 = componentAlert0.getValue();
      assertEquals((-2253.9317249), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ComponentAlert componentAlert0 = new ComponentAlert();
      ScoreThresholdSettings.ComparatorType scoreThresholdSettings_ComparatorType0 = ScoreThresholdSettings.ComparatorType.equals;
      componentAlert0.setComparator(scoreThresholdSettings_ComparatorType0);
      assertEquals(ScoreThresholdSettings.ComparatorType.equals, componentAlert0.getComparator());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ComponentAlert componentAlert0 = new ComponentAlert();
      Double double0 = new Double((-1.0));
      componentAlert0.setValue(double0);
      Double double1 = componentAlert0.getValue();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ComponentAlert componentAlert0 = new ComponentAlert();
      ScoreThresholdSettings.ComparatorType scoreThresholdSettings_ComparatorType0 = componentAlert0.getComparator();
      assertEquals(ScoreThresholdSettings.ComparatorType.less_or_equal, scoreThresholdSettings_ComparatorType0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ComponentAlert componentAlert0 = new ComponentAlert();
      Double double0 = componentAlert0.getValue();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ComponentAlert componentAlert0 = ComponentAlert.cloneComponentAlert((ComponentAlert) null);
      assertNull(componentAlert0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ComponentAlert componentAlert0 = new ComponentAlert();
      String string0 = componentAlert0.toString();
      assertEquals("WidgetAlert{comparator=less_or_equal, value=null}", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ComponentAlert componentAlert0 = new ComponentAlert();
      ComponentAlert componentAlert1 = ComponentAlert.cloneComponentAlert(componentAlert0);
      assertNotSame(componentAlert1, componentAlert0);
      assertNotNull(componentAlert1);
  }
}
