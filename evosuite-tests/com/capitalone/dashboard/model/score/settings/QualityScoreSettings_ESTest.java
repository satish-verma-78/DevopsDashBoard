/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:40:20 GMT 2020
 */

package com.capitalone.dashboard.model.score.settings;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.capitalone.dashboard.model.score.settings.QualityScoreSettings;
import com.capitalone.dashboard.model.score.settings.ScoreComponentSettings;
import com.capitalone.dashboard.model.score.settings.ScoreCriteria;
import com.capitalone.dashboard.model.score.settings.ScoreThresholdSettings;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QualityScoreSettings_ESTest extends QualityScoreSettings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(2947);
      qualityScoreSettings_ViolationsScoreSettings0.setBlockerViolationsWeight(0);
      qualityScoreSettings_ViolationsScoreSettings0.toString();
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      qualityScoreSettings0.getViolations();
      qualityScoreSettings0.toString();
      qualityScoreSettings0.toString();
      qualityScoreSettings0.setUnitTests(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals(2947, qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
      
      qualityScoreSettings0.getViolations();
      qualityScoreSettings0.toString();
      qualityScoreSettings0.toString();
      qualityScoreSettings0.toString();
      qualityScoreSettings0.getViolations();
      qualityScoreSettings0.toString();
      qualityScoreSettings0.getViolations();
      qualityScoreSettings0.toString();
      qualityScoreSettings0.getViolations();
      qualityScoreSettings0.getViolations();
      qualityScoreSettings0.getViolations();
      String string0 = qualityScoreSettings0.toString();
      assertEquals("QualityScoreSettings{codeCoverage=null, unitTests=ViolationsScoreSettings{blockerViolationsWeight=0, criticalViolationsWeight=5, majorViolationWeight=2947, allowNegative=false, disabled=false, weight=0, criteria=null}, violations=ViolationsScoreSettings{blockerViolationsWeight=0, criticalViolationsWeight=5, majorViolationWeight=2947, allowNegative=false, disabled=false, weight=0, criteria=null}, disabled=false, weight=0, criteria=null}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setBlockerViolationsWeight((-1149));
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals((-1149), qualityScoreSettings_ViolationsScoreSettings0.getBlockerViolationsWeight());
      
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings0.toString();
      qualityScoreSettings0.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      qualityScoreSettings1.getViolations();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = qualityScoreSettings1.getViolations();
      assertEquals(1, qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      QualityScoreSettings.cloneQualityScoreSettings((QualityScoreSettings) null);
      qualityScoreSettings0.toString();
      qualityScoreSettings0.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      assertFalse(qualityScoreSettings1.equals((Object)qualityScoreSettings0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setCriticalViolationsWeight((-933));
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals((-933), qualityScoreSettings_ViolationsScoreSettings0.getCriticalViolationsWeight());
      
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      ScoreComponentSettings scoreComponentSettings0 = new ScoreComponentSettings();
      qualityScoreSettings0.setUnitTests(qualityScoreSettings1);
      qualityScoreSettings1.toString();
      qualityScoreSettings0.setUnitTests(qualityScoreSettings1);
      qualityScoreSettings0.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      qualityScoreSettings1.getCodeCoverage();
      QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = qualityScoreSettings1.getViolations();
      assertEquals((-933), qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setWeight((-4033));
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.setUnitTests(qualityScoreSettings_ViolationsScoreSettings0);
      qualityScoreSettings0.getCodeCoverage();
      qualityScoreSettings0.setUnitTests(qualityScoreSettings1);
      String string0 = qualityScoreSettings1.toString();
      assertEquals("QualityScoreSettings{codeCoverage=null, unitTests=ViolationsScoreSettings{blockerViolationsWeight=20, criticalViolationsWeight=5, majorViolationWeight=1, allowNegative=false, disabled=false, weight=-4033, criteria=null}, violations=ViolationsScoreSettings{blockerViolationsWeight=20, criticalViolationsWeight=5, majorViolationWeight=1, allowNegative=false, disabled=false, weight=-4033, criteria=null}, disabled=false, weight=0, criteria=null}", string0);
      
      qualityScoreSettings0.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      qualityScoreSettings1.getCodeCoverage();
      QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = qualityScoreSettings1.getViolations();
      assertNotSame(qualityScoreSettings_ViolationsScoreSettings1, qualityScoreSettings_ViolationsScoreSettings0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      QualityScoreSettings qualityScoreSettings2 = new QualityScoreSettings();
      qualityScoreSettings0.setCodeCoverage(qualityScoreSettings2);
      QualityScoreSettings qualityScoreSettings3 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings0.setCodeCoverage(qualityScoreSettings3);
      qualityScoreSettings3.setCodeCoverage(qualityScoreSettings1);
      qualityScoreSettings3.setWeight((-787));
      qualityScoreSettings0.setCodeCoverage(qualityScoreSettings3);
      qualityScoreSettings3.getCodeCoverage();
      QualityScoreSettings qualityScoreSettings4 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings4.toString();
      ScoreComponentSettings scoreComponentSettings0 = qualityScoreSettings4.getCodeCoverage();
      QualityScoreSettings qualityScoreSettings5 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings1);
      ScoreComponentSettings.cloneScoreComponentSettings(scoreComponentSettings0);
      QualityScoreSettings qualityScoreSettings6 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings5);
      QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings1);
      qualityScoreSettings0.toString();
      qualityScoreSettings1.toString();
      QualityScoreSettings qualityScoreSettings7 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings7.setDisabled(true);
      qualityScoreSettings0.toString();
      qualityScoreSettings2.getViolations();
      QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings1);
      qualityScoreSettings4.getViolations();
      qualityScoreSettings0.getCodeCoverage();
      qualityScoreSettings6.toString();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = qualityScoreSettings4.getViolations();
      assertNull(qualityScoreSettings_ViolationsScoreSettings0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      qualityScoreSettings0.setWeight(247);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings0);
      qualityScoreSettings0.toString();
      qualityScoreSettings0.getCodeCoverage();
      qualityScoreSettings0.toString();
      qualityScoreSettings0.getCodeCoverage();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings0.toString();
      QualityScoreSettings qualityScoreSettings2 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.setDisabled(false);
      qualityScoreSettings0.getViolations();
      qualityScoreSettings1.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      qualityScoreSettings2.getUnitTests();
      ScoreComponentSettings.cloneScoreComponentSettings((ScoreComponentSettings) null);
      qualityScoreSettings0.toString();
      QualityScoreSettings qualityScoreSettings3 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings2);
      qualityScoreSettings1.getCodeCoverage();
      qualityScoreSettings3.toString();
      String string0 = qualityScoreSettings1.toString();
      assertEquals("QualityScoreSettings{codeCoverage=null, unitTests=null, violations=null, disabled=false, weight=247, criteria=null}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(0);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight((-1));
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals((-1), qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
      
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(false);
      qualityScoreSettings_ViolationsScoreSettings1.setWeight(4);
      qualityScoreSettings_ViolationsScoreSettings1.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(true);
      qualityScoreSettings_ViolationsScoreSettings1.setCriticalViolationsWeight(0);
      qualityScoreSettings0.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setAllowNegative(true);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.setCodeCoverage(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings1.toString();
      qualityScoreSettings1.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight();
      qualityScoreSettings0.getUnitTests();
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings1.getViolations();
      qualityScoreSettings0.setUnitTests((ScoreComponentSettings) null);
      QualityScoreSettings qualityScoreSettings2 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings2.toString();
      qualityScoreSettings2.getCodeCoverage();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings2 = qualityScoreSettings2.getViolations();
      assertEquals(0, qualityScoreSettings_ViolationsScoreSettings2.getCriticalViolationsWeight());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      qualityScoreSettings0.setDisabled(true);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings1);
      ScoreComponentSettings scoreComponentSettings0 = ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings0);
      qualityScoreSettings1.setCodeCoverage(qualityScoreSettings0);
      qualityScoreSettings1.getUnitTests();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings0);
      ScoreComponentSettings scoreComponentSettings1 = ScoreComponentSettings.cloneScoreComponentSettings(scoreComponentSettings0);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(1098);
      qualityScoreSettings_ViolationsScoreSettings0.setBlockerViolationsWeight(2486);
      ScoreComponentSettings.cloneScoreComponentSettings(scoreComponentSettings1);
      qualityScoreSettings_ViolationsScoreSettings1.toString();
      qualityScoreSettings_ViolationsScoreSettings0.toString();
      qualityScoreSettings_ViolationsScoreSettings0.setAllowNegative(true);
      qualityScoreSettings1.getViolations();
      qualityScoreSettings1.setUnitTests(qualityScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.setAllowNegative(true);
      ScoreComponentSettings scoreComponentSettings2 = qualityScoreSettings1.getUnitTests();
      qualityScoreSettings0.setCodeCoverage(scoreComponentSettings2);
      qualityScoreSettings1.setUnitTests(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals(2486, qualityScoreSettings_ViolationsScoreSettings0.getBlockerViolationsWeight());
      assertTrue(qualityScoreSettings1.isDisabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(0);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight((-1));
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(false);
      qualityScoreSettings_ViolationsScoreSettings1.setWeight(4);
      qualityScoreSettings_ViolationsScoreSettings1.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(true);
      qualityScoreSettings0.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setAllowNegative(true);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.setCodeCoverage(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings1.toString();
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings0.getUnitTests();
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      assertTrue(qualityScoreSettings_ViolationsScoreSettings1.isAllowNegative());
      
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings2 = qualityScoreSettings1.getViolations();
      qualityScoreSettings0.setUnitTests(qualityScoreSettings_ViolationsScoreSettings2);
      qualityScoreSettings1.getViolations();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings3 = (QualityScoreSettings.ViolationsScoreSettings)qualityScoreSettings1.getCodeCoverage();
      assertEquals(5, qualityScoreSettings_ViolationsScoreSettings3.getCriticalViolationsWeight());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setDisabled(true);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(0);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight((-1));
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(false);
      qualityScoreSettings_ViolationsScoreSettings1.setWeight(0);
      qualityScoreSettings_ViolationsScoreSettings1.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(true);
      qualityScoreSettings0.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setAllowNegative(true);
      QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings0);
      ScoreComponentSettings.copyScoreComponentSettings(qualityScoreSettings0, qualityScoreSettings_ViolationsScoreSettings1);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.setCodeCoverage(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings1.toString();
      qualityScoreSettings1.setViolations(qualityScoreSettings_ViolationsScoreSettings1);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.toString();
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight();
      qualityScoreSettings1.getCodeCoverage();
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings0.setUnitTests(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals((-1), qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
      assertEquals(5, qualityScoreSettings_ViolationsScoreSettings0.getCriticalViolationsWeight());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(0);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight((-1));
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals((-1), qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
      
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings1.setWeight(4);
      qualityScoreSettings_ViolationsScoreSettings1.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(true);
      qualityScoreSettings0.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setAllowNegative(true);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.setCodeCoverage(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings1.toString();
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      int int0 = QualityScoreSettings.ViolationsScoreSettings.BLOCKER_VIOLATIONS_WEIGHT;
      qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight();
      qualityScoreSettings0.getUnitTests();
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings2 = qualityScoreSettings1.getViolations();
      qualityScoreSettings0.setUnitTests(qualityScoreSettings_ViolationsScoreSettings2);
      assertEquals(20, qualityScoreSettings_ViolationsScoreSettings2.getBlockerViolationsWeight());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(0);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight((-1));
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals((-1), qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
      
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(false);
      qualityScoreSettings_ViolationsScoreSettings1.setWeight(4);
      qualityScoreSettings_ViolationsScoreSettings1.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(true);
      qualityScoreSettings0.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setAllowNegative(true);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.setCodeCoverage(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings1.toString();
      qualityScoreSettings1.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings1.toString();
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight();
      qualityScoreSettings0.getUnitTests();
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings1.getViolations();
      qualityScoreSettings0.setUnitTests((ScoreComponentSettings) null);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings2 = qualityScoreSettings0.getViolations();
      assertEquals(20, qualityScoreSettings_ViolationsScoreSettings2.getBlockerViolationsWeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      qualityScoreSettings0.setWeight(0);
      qualityScoreSettings0.setWeight((-451));
      qualityScoreSettings0.getUnitTests();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      QualityScoreSettings qualityScoreSettings2 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings1);
      qualityScoreSettings2.setUnitTests(qualityScoreSettings0);
      qualityScoreSettings1.setUnitTests(qualityScoreSettings2);
      QualityScoreSettings qualityScoreSettings3 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings1);
      ScoreComponentSettings.cloneScoreComponentSettings((ScoreComponentSettings) null);
      qualityScoreSettings1.setWeight(1);
      qualityScoreSettings3.setWeight((-1465));
      qualityScoreSettings0.getViolations();
      qualityScoreSettings0.toString();
      qualityScoreSettings3.getViolations();
      qualityScoreSettings1.getViolations();
      QualityScoreSettings qualityScoreSettings4 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings4.setUnitTests(qualityScoreSettings1);
      qualityScoreSettings4.getViolations();
      qualityScoreSettings0.getUnitTests();
      qualityScoreSettings0.setCodeCoverage(qualityScoreSettings3);
      qualityScoreSettings3.getCodeCoverage();
      qualityScoreSettings1.toString();
      QualityScoreSettings qualityScoreSettings5 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings2);
      QualityScoreSettings qualityScoreSettings6 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings3);
      qualityScoreSettings6.toString();
      qualityScoreSettings6.setCodeCoverage((ScoreComponentSettings) null);
      QualityScoreSettings qualityScoreSettings7 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings4);
      assertEquals((-451), qualityScoreSettings7.getWeight());
      
      qualityScoreSettings7.setWeight(1357);
      qualityScoreSettings4.getUnitTests();
      qualityScoreSettings0.getUnitTests();
      qualityScoreSettings6.getViolations();
      QualityScoreSettings qualityScoreSettings8 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings5);
      assertEquals((-451), qualityScoreSettings8.getWeight());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(20);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight((-1));
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(false);
      qualityScoreSettings_ViolationsScoreSettings1.setWeight(4);
      qualityScoreSettings_ViolationsScoreSettings1.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setDisabled(true);
      qualityScoreSettings0.toString();
      qualityScoreSettings_ViolationsScoreSettings1.setAllowNegative(true);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.setCodeCoverage(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings1.toString();
      qualityScoreSettings1.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight();
      qualityScoreSettings0.getUnitTests();
      qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      qualityScoreSettings1.getViolations();
      qualityScoreSettings0.setUnitTests((ScoreComponentSettings) null);
      assertFalse(qualityScoreSettings0.equals((Object)qualityScoreSettings1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QualityScoreSettings.cloneQualityScoreSettings((QualityScoreSettings) null);
      QualityScoreSettings.cloneQualityScoreSettings((QualityScoreSettings) null);
      ScoreCriteria scoreCriteria0 = new ScoreCriteria();
      // Undeclared exception!
      try { 
        ScoreCriteria.cloneScoreCriteria(scoreCriteria0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("com.capitalone.dashboard.model.score.settings.ScoreCriteria", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      ScoreComponentSettings scoreComponentSettings0 = ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings_ViolationsScoreSettings0);
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.getCriteria();
      ScoreCriteria.cloneScoreCriteria((ScoreCriteria) null);
      scoreComponentSettings0.setCriteria((ScoreCriteria) null);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings0);
      ScoreComponentSettings.cloneScoreComponentSettings(scoreComponentSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.setCriticalViolationsWeight((-439));
      qualityScoreSettings_ViolationsScoreSettings1.setCriticalViolationsWeight((-1241));
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings2 = QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings_ViolationsScoreSettings2.setAllowNegative(false);
      assertEquals((-1241), qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight());
      assertEquals(1, qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = qualityScoreSettings1.getViolations();
      assertNotNull(qualityScoreSettings_ViolationsScoreSettings1);
      
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings_ViolationsScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.setBlockerViolationsWeight(587);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings1);
      QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings1);
      qualityScoreSettings_ViolationsScoreSettings1.setCriticalViolationsWeight(5);
      assertEquals(587, qualityScoreSettings_ViolationsScoreSettings1.getBlockerViolationsWeight());
      
      qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight();
      qualityScoreSettings1.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals(1, qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.getViolations();
      QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings((QualityScoreSettings.ViolationsScoreSettings) null);
      qualityScoreSettings1.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      assertFalse(qualityScoreSettings0.equals((Object)qualityScoreSettings1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings0);
      int int0 = qualityScoreSettings_ViolationsScoreSettings1.getCriticalViolationsWeight();
      assertEquals(1, qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight());
      assertFalse(qualityScoreSettings_ViolationsScoreSettings1.isAllowNegative());
      assertNotSame(qualityScoreSettings_ViolationsScoreSettings1, qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals(5, int0);
      assertEquals(20, qualityScoreSettings_ViolationsScoreSettings1.getBlockerViolationsWeight());
      assertEquals(1, qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
      assertEquals(20, qualityScoreSettings_ViolationsScoreSettings0.getBlockerViolationsWeight());
      assertEquals(5, qualityScoreSettings_ViolationsScoreSettings0.getCriticalViolationsWeight());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setBlockerViolationsWeight((-1));
      qualityScoreSettings_ViolationsScoreSettings0.setAllowNegative(true);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(0);
      qualityScoreSettings_ViolationsScoreSettings0.isAllowNegative();
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      qualityScoreSettings0.setWeight(1812);
      qualityScoreSettings0.toString();
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings0.toString();
      assertTrue(qualityScoreSettings_ViolationsScoreSettings0.isAllowNegative());
      assertEquals((-1), qualityScoreSettings_ViolationsScoreSettings0.getBlockerViolationsWeight());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.toString();
      qualityScoreSettings_ViolationsScoreSettings0.setAllowNegative(false);
      qualityScoreSettings_ViolationsScoreSettings0.setAllowNegative(true);
      qualityScoreSettings_ViolationsScoreSettings0.toString();
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings0.setDisabled(true);
      qualityScoreSettings1.setUnitTests(qualityScoreSettings_ViolationsScoreSettings0);
      qualityScoreSettings1.getUnitTests();
      qualityScoreSettings1.toString();
      qualityScoreSettings1.setCodeCoverage(qualityScoreSettings0);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings0);
      ScoreCriteria scoreCriteria0 = new ScoreCriteria();
      LinkedList<ScoreThresholdSettings> linkedList0 = new LinkedList<ScoreThresholdSettings>();
      scoreCriteria0.setDataRangeThresholds(linkedList0);
      qualityScoreSettings_ViolationsScoreSettings0.setCriteria(scoreCriteria0);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings1);
      QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings1);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings_ViolationsScoreSettings1);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings1);
      qualityScoreSettings_ViolationsScoreSettings1.setCriticalViolationsWeight(5);
      // Undeclared exception!
      try { 
        QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("com.capitalone.dashboard.model.score.settings.ScoreCriteria", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = qualityScoreSettings0.getViolations();
      assertNull(qualityScoreSettings_ViolationsScoreSettings0);
      
      qualityScoreSettings0.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      ScoreComponentSettings.cloneScoreComponentSettings(qualityScoreSettings1);
      qualityScoreSettings0.setUnitTests(qualityScoreSettings1);
      qualityScoreSettings1.toString();
      qualityScoreSettings0.setUnitTests(qualityScoreSettings1);
      qualityScoreSettings0.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      qualityScoreSettings0.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      ScoreComponentSettings scoreComponentSettings0 = qualityScoreSettings1.getCodeCoverage();
      assertNull(scoreComponentSettings0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setAllowNegative(false);
      qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight();
      qualityScoreSettings_ViolationsScoreSettings0.setCriticalViolationsWeight(1);
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      ScoreCriteria scoreCriteria0 = new ScoreCriteria();
      qualityScoreSettings_ViolationsScoreSettings0.setDisabled(false);
      qualityScoreSettings_ViolationsScoreSettings0.toString();
      // Undeclared exception!
      try { 
        ScoreCriteria.cloneScoreCriteria(scoreCriteria0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("com.capitalone.dashboard.model.score.settings.ScoreCriteria", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      String string0 = qualityScoreSettings1.toString();
      assertEquals("QualityScoreSettings{codeCoverage=null, unitTests=null, violations=null, disabled=false, weight=0, criteria=null}", string0);
      assertNotSame(qualityScoreSettings1, qualityScoreSettings0);
      
      QualityScoreSettings qualityScoreSettings2 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings1);
      qualityScoreSettings0.getUnitTests();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.setMajorViolationWeight(0);
      qualityScoreSettings_ViolationsScoreSettings1.setBlockerViolationsWeight((-604));
      qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight();
      assertEquals((-604), qualityScoreSettings_ViolationsScoreSettings1.getBlockerViolationsWeight());
      
      qualityScoreSettings2.getViolations();
      assertNotSame(qualityScoreSettings0, qualityScoreSettings1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      ScoreComponentSettings.copyScoreComponentSettings(qualityScoreSettings1, qualityScoreSettings1);
      qualityScoreSettings1.setUnitTests(qualityScoreSettings0);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings1.setMajorViolationWeight(0);
      qualityScoreSettings_ViolationsScoreSettings1.isAllowNegative();
      qualityScoreSettings_ViolationsScoreSettings1.toString();
      assertEquals(0, qualityScoreSettings_ViolationsScoreSettings1.getMajorViolationWeight());
      assertEquals(1, qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings1.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      assertNotSame(qualityScoreSettings1, qualityScoreSettings0);
      assertEquals(5, qualityScoreSettings_ViolationsScoreSettings0.getCriticalViolationsWeight());
      assertEquals(20, qualityScoreSettings_ViolationsScoreSettings0.getBlockerViolationsWeight());
      assertEquals(1, qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
      assertFalse(qualityScoreSettings_ViolationsScoreSettings0.isAllowNegative());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(0);
      qualityScoreSettings_ViolationsScoreSettings0.setAllowNegative(false);
      qualityScoreSettings_ViolationsScoreSettings0.setWeight(0);
      String string0 = qualityScoreSettings_ViolationsScoreSettings0.toString();
      assertEquals("ViolationsScoreSettings{blockerViolationsWeight=20, criticalViolationsWeight=5, majorViolationWeight=0, allowNegative=false, disabled=false, weight=0, criteria=null}", string0);
      
      qualityScoreSettings_ViolationsScoreSettings0.setCriticalViolationsWeight(0);
      assertEquals(0, qualityScoreSettings_ViolationsScoreSettings0.getCriticalViolationsWeight());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings_ViolationsScoreSettings0.getBlockerViolationsWeight();
      qualityScoreSettings_ViolationsScoreSettings0.getBlockerViolationsWeight();
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      ScoreCriteria scoreCriteria0 = new ScoreCriteria();
      // Undeclared exception!
      try { 
        ScoreCriteria.cloneScoreCriteria(scoreCriteria0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("com.capitalone.dashboard.model.score.settings.ScoreCriteria", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.setCodeCoverage(qualityScoreSettings0);
      assertNotSame(qualityScoreSettings1, qualityScoreSettings0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      qualityScoreSettings1.getUnitTests();
      qualityScoreSettings1.getCodeCoverage();
      assertNotSame(qualityScoreSettings1, qualityScoreSettings0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      String string0 = qualityScoreSettings_ViolationsScoreSettings0.toString();
      assertEquals("ViolationsScoreSettings{blockerViolationsWeight=20, criticalViolationsWeight=5, majorViolationWeight=1, allowNegative=false, disabled=false, weight=0, criteria=null}", string0);
      
      qualityScoreSettings_ViolationsScoreSettings0.setWeight((-1338));
      QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings0);
      qualityScoreSettings_ViolationsScoreSettings0.setMajorViolationWeight(0);
      assertEquals(0, qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings1 = QualityScoreSettings.ViolationsScoreSettings.cloneViolationsScoreSettings(qualityScoreSettings_ViolationsScoreSettings0);
      String string0 = qualityScoreSettings_ViolationsScoreSettings1.toString();
      assertEquals("ViolationsScoreSettings{blockerViolationsWeight=20, criticalViolationsWeight=5, majorViolationWeight=1, allowNegative=false, disabled=false, weight=0, criteria=null}", string0);
      assertNotSame(qualityScoreSettings_ViolationsScoreSettings1, qualityScoreSettings_ViolationsScoreSettings0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QualityScoreSettings qualityScoreSettings0 = new QualityScoreSettings();
      QualityScoreSettings.cloneQualityScoreSettings((QualityScoreSettings) null);
      QualityScoreSettings.ViolationsScoreSettings qualityScoreSettings_ViolationsScoreSettings0 = new QualityScoreSettings.ViolationsScoreSettings();
      qualityScoreSettings0.setViolations(qualityScoreSettings_ViolationsScoreSettings0);
      assertEquals(20, qualityScoreSettings_ViolationsScoreSettings0.getBlockerViolationsWeight());
      assertEquals(5, qualityScoreSettings_ViolationsScoreSettings0.getCriticalViolationsWeight());
      assertEquals(1, qualityScoreSettings_ViolationsScoreSettings0.getMajorViolationWeight());
      
      QualityScoreSettings qualityScoreSettings1 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      String string0 = qualityScoreSettings0.toString();
      assertEquals("QualityScoreSettings{codeCoverage=null, unitTests=null, violations=ViolationsScoreSettings{blockerViolationsWeight=20, criticalViolationsWeight=5, majorViolationWeight=1, allowNegative=false, disabled=false, weight=0, criteria=null}, disabled=false, weight=0, criteria=null}", string0);
      
      qualityScoreSettings0.setViolations((QualityScoreSettings.ViolationsScoreSettings) null);
      QualityScoreSettings qualityScoreSettings2 = QualityScoreSettings.cloneQualityScoreSettings(qualityScoreSettings0);
      assertNotSame(qualityScoreSettings2, qualityScoreSettings1);
  }
}
