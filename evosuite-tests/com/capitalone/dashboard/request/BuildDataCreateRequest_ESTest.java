/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:12:21 GMT 2020
 */

package com.capitalone.dashboard.request;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.model.BuildStage;
import com.capitalone.dashboard.model.CommitType;
import com.capitalone.dashboard.model.RepoBranch;
import com.capitalone.dashboard.model.SCM;
import com.capitalone.dashboard.request.BuildDataCreateRequest;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BuildDataCreateRequest_ESTest extends BuildDataCreateRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setStartedBy("git@");
      String string0 = buildDataCreateRequest0.getStartedBy();
      assertEquals("git@", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setStartedBy("");
      String string0 = buildDataCreateRequest0.getStartedBy();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setStartTime((-2969L));
      long long0 = buildDataCreateRequest0.getStartTime();
      assertEquals((-2969L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setStages((List<BuildStage>) null);
      List<BuildStage> list0 = buildDataCreateRequest0.getStages();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      LinkedList<BuildStage> linkedList0 = new LinkedList<BuildStage>();
      BuildStage buildStage0 = new BuildStage();
      linkedList0.add(buildStage0);
      buildDataCreateRequest0.setStages(linkedList0);
      buildDataCreateRequest0.getStages();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setSourceChangeSet((List<SCM>) null);
      List<SCM> list0 = buildDataCreateRequest0.getSourceChangeSet();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      LinkedList<SCM> linkedList0 = new LinkedList<SCM>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      CommitType commitType0 = CommitType.Merge;
      SCM sCM0 = new SCM("m3ve&", (String) null, ";U#", "", "ZjA< (Ir+GHru", "com.capitalone.dashboard.request.BuildDataCreateRequest", linkedList1, 0L, (-1313L), commitType0);
      linkedList0.add(sCM0);
      buildDataCreateRequest0.setSourceChangeSet(linkedList0);
      List<SCM> list0 = buildDataCreateRequest0.getSourceChangeSet();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setNumber("r#Y\".;{uGIke6");
      String string0 = buildDataCreateRequest0.getNumber();
      assertEquals("r#Y\".;{uGIke6", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setNumber("");
      String string0 = buildDataCreateRequest0.getNumber();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setNiceName(" u'dvTeco");
      String string0 = buildDataCreateRequest0.getNiceName();
      assertEquals(" u'dvTeco", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setNiceName("");
      String string0 = buildDataCreateRequest0.getNiceName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setLog("]`9b%2Dh=");
      String string0 = buildDataCreateRequest0.getLog();
      assertEquals("]`9b%2Dh=", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setJobUrl("");
      String string0 = buildDataCreateRequest0.getJobUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setJobName("kDv:Y>x");
      String string0 = buildDataCreateRequest0.getJobName();
      assertEquals("kDv:Y>x", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setInstanceUrl("wq{)r;;&svF");
      String string0 = buildDataCreateRequest0.getInstanceUrl();
      assertEquals("wq{)r;;&svF", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setEndTime(1590L);
      long long0 = buildDataCreateRequest0.getEndTime();
      assertEquals(1590L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setEndTime((-1572L));
      long long0 = buildDataCreateRequest0.getEndTime();
      assertEquals((-1572L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setDuration(1889L);
      long long0 = buildDataCreateRequest0.getDuration();
      assertEquals(1889L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setDuration((-1L));
      long long0 = buildDataCreateRequest0.getDuration();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      LinkedList<RepoBranch> linkedList0 = new LinkedList<RepoBranch>();
      RepoBranch.RepoType repoBranch_RepoType0 = RepoBranch.RepoType.Unknown;
      RepoBranch repoBranch0 = new RepoBranch(" is not a valid Commit Type", "", repoBranch_RepoType0);
      linkedList0.add(repoBranch0);
      buildDataCreateRequest0.setCodeRepos(linkedList0);
      List<RepoBranch> list0 = buildDataCreateRequest0.getCodeRepos();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setBuildUrl("");
      String string0 = buildDataCreateRequest0.getBuildUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setBuildStatus("ykXw^P\\iyA#>)071}");
      String string0 = buildDataCreateRequest0.getBuildStatus();
      assertEquals("ykXw^P\\iyA#>)071}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setBuildStatus("");
      String string0 = buildDataCreateRequest0.getBuildStatus();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setJobName("");
      String string0 = buildDataCreateRequest0.getJobName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      String string0 = buildDataCreateRequest0.getBuildUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      long long0 = buildDataCreateRequest0.getDuration();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setInstanceUrl("");
      String string0 = buildDataCreateRequest0.getInstanceUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setBuildUrl("7+gVAq'#/lg%O3aa");
      String string0 = buildDataCreateRequest0.getBuildUrl();
      assertEquals("7+gVAq'#/lg%O3aa", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      List<SCM> list0 = buildDataCreateRequest0.getSourceChangeSet();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setCodeRepos((List<RepoBranch>) null);
      List<RepoBranch> list0 = buildDataCreateRequest0.getCodeRepos();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setJobUrl("7+gVAq'#/lg%O3aa");
      String string0 = buildDataCreateRequest0.getJobUrl();
      assertEquals("7+gVAq'#/lg%O3aa", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      String string0 = buildDataCreateRequest0.getJobName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setLog("");
      String string0 = buildDataCreateRequest0.getLog();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      List<BuildStage> list0 = buildDataCreateRequest0.getStages();
      buildDataCreateRequest0.setStages(list0);
      assertNull(buildDataCreateRequest0.getLog());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      String string0 = buildDataCreateRequest0.getJobUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      String string0 = buildDataCreateRequest0.getNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      String string0 = buildDataCreateRequest0.getLog();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      String string0 = buildDataCreateRequest0.getBuildStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      long long0 = buildDataCreateRequest0.getEndTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      String string0 = buildDataCreateRequest0.getStartedBy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      String string0 = buildDataCreateRequest0.getInstanceUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      List<RepoBranch> list0 = buildDataCreateRequest0.getCodeRepos();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      buildDataCreateRequest0.setStartTime(1207L);
      long long0 = buildDataCreateRequest0.getStartTime();
      assertEquals(1207L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      long long0 = buildDataCreateRequest0.getStartTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuildDataCreateRequest buildDataCreateRequest0 = new BuildDataCreateRequest();
      String string0 = buildDataCreateRequest0.getNiceName();
      assertNull(string0);
  }
}
