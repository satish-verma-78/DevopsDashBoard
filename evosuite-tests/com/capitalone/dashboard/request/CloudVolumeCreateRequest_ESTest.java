/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:08:20 GMT 2020
 */

package com.capitalone.dashboard.request;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.model.NameValue;
import com.capitalone.dashboard.request.CloudVolumeCreateRequest;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CloudVolumeCreateRequest_ESTest extends CloudVolumeCreateRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setEncrypted(true);
      boolean boolean0 = cloudVolumeCreateRequest0.isEncrypted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setZone("com.capitalone.dashboard.model.NameValue");
      String string0 = cloudVolumeCreateRequest0.getZone();
      assertEquals("com.capitalone.dashboard.model.NameValue", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setZone("");
      String string0 = cloudVolumeCreateRequest0.getZone();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setVolumeId("?");
      String string0 = cloudVolumeCreateRequest0.getVolumeId();
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setVolumeId("");
      String string0 = cloudVolumeCreateRequest0.getVolumeId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setType("0 fGwAp^");
      String string0 = cloudVolumeCreateRequest0.getType();
      assertEquals("0 fGwAp^", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setType("");
      String string0 = cloudVolumeCreateRequest0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setStatus("rIa4)%r");
      String string0 = cloudVolumeCreateRequest0.getStatus();
      assertEquals("rIa4)%r", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setStatus("");
      String string0 = cloudVolumeCreateRequest0.getStatus();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setSize(105);
      int int0 = cloudVolumeCreateRequest0.getSize();
      assertEquals(105, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setCreationDate(334L);
      long long0 = cloudVolumeCreateRequest0.getCreationDate();
      assertEquals(334L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setCreationDate((-939));
      long long0 = cloudVolumeCreateRequest0.getCreationDate();
      assertEquals((-939L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setAccountNumber("fi");
      String string0 = cloudVolumeCreateRequest0.getAccountNumber();
      assertEquals("fi", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setAccountNumber("");
      String string0 = cloudVolumeCreateRequest0.getAccountNumber();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setVolumeId("hpxq1Y79");
      cloudVolumeCreateRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      CloudVolumeCreateRequest cloudVolumeCreateRequest1 = new CloudVolumeCreateRequest();
      boolean boolean0 = cloudVolumeCreateRequest1.equals(cloudVolumeCreateRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      CloudVolumeCreateRequest cloudVolumeCreateRequest1 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest1.setVolumeId("YS67n9m)");
      cloudVolumeCreateRequest1.equals(cloudVolumeCreateRequest0);
      assertFalse(cloudVolumeCreateRequest0.equals((Object)cloudVolumeCreateRequest1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      Object object0 = new Object();
      boolean boolean0 = cloudVolumeCreateRequest0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      boolean boolean0 = cloudVolumeCreateRequest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      boolean boolean0 = cloudVolumeCreateRequest0.equals(cloudVolumeCreateRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      CloudVolumeCreateRequest cloudVolumeCreateRequest1 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest1.setVolumeId("YS67n9m)");
      boolean boolean0 = cloudVolumeCreateRequest0.equals(cloudVolumeCreateRequest1);
      //  // Unstable assertion: assertTrue(cloudVolumeCreateRequest1.equals((Object)cloudVolumeCreateRequest0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      String string0 = cloudVolumeCreateRequest0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      cloudVolumeCreateRequest0.setSize((-1));
      int int0 = cloudVolumeCreateRequest0.getSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      List<NameValue> list0 = cloudVolumeCreateRequest0.getTags();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      int int0 = cloudVolumeCreateRequest0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      List<String> list0 = cloudVolumeCreateRequest0.getAttchInstances();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      String string0 = cloudVolumeCreateRequest0.getVolumeId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      long long0 = cloudVolumeCreateRequest0.getCreationDate();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      String string0 = cloudVolumeCreateRequest0.getStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      boolean boolean0 = cloudVolumeCreateRequest0.isEncrypted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      String string0 = cloudVolumeCreateRequest0.getAccountNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CloudVolumeCreateRequest cloudVolumeCreateRequest0 = new CloudVolumeCreateRequest();
      String string0 = cloudVolumeCreateRequest0.getZone();
      assertNull(string0);
  }
}
