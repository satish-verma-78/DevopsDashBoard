/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:15:06 GMT 2020
 */

package com.capitalone.dashboard.request;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.request.CloudVolumeListRefreshRequest;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CloudVolumeListRefreshRequest_ESTest extends CloudVolumeListRefreshRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CloudVolumeListRefreshRequest cloudVolumeListRefreshRequest0 = new CloudVolumeListRefreshRequest();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addFirst("Wx3=T/MUk>qd!u78");
      cloudVolumeListRefreshRequest0.setVolumeIds(linkedList0);
      List<String> list0 = cloudVolumeListRefreshRequest0.getVolumeIds();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CloudVolumeListRefreshRequest cloudVolumeListRefreshRequest0 = new CloudVolumeListRefreshRequest();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      cloudVolumeListRefreshRequest0.setVolumeIds(list0);
      List<String> list1 = cloudVolumeListRefreshRequest0.getVolumeIds();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CloudVolumeListRefreshRequest cloudVolumeListRefreshRequest0 = new CloudVolumeListRefreshRequest();
      MockDate mockDate0 = new MockDate();
      cloudVolumeListRefreshRequest0.setRefreshDate(mockDate0);
      Date date0 = cloudVolumeListRefreshRequest0.getRefreshDate();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CloudVolumeListRefreshRequest cloudVolumeListRefreshRequest0 = new CloudVolumeListRefreshRequest();
      cloudVolumeListRefreshRequest0.setAccountNumber("$^6h");
      String string0 = cloudVolumeListRefreshRequest0.getAccountNumber();
      assertEquals("$^6h", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CloudVolumeListRefreshRequest cloudVolumeListRefreshRequest0 = new CloudVolumeListRefreshRequest();
      cloudVolumeListRefreshRequest0.setAccountNumber("");
      String string0 = cloudVolumeListRefreshRequest0.getAccountNumber();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CloudVolumeListRefreshRequest cloudVolumeListRefreshRequest0 = new CloudVolumeListRefreshRequest();
      String string0 = cloudVolumeListRefreshRequest0.getAccountNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CloudVolumeListRefreshRequest cloudVolumeListRefreshRequest0 = new CloudVolumeListRefreshRequest();
      Date date0 = cloudVolumeListRefreshRequest0.getRefreshDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CloudVolumeListRefreshRequest cloudVolumeListRefreshRequest0 = new CloudVolumeListRefreshRequest();
      List<String> list0 = cloudVolumeListRefreshRequest0.getVolumeIds();
      assertNull(list0);
  }
}
