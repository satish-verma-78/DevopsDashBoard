/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 13:03:34 GMT 2020
 */

package com.capitalone.dashboard.request;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.model.CodeQualityMetric;
import com.capitalone.dashboard.model.CodeQualityType;
import com.capitalone.dashboard.request.CodeQualityCreateRequest;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodeQualityCreateRequest_ESTest extends CodeQualityCreateRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      CodeQualityType codeQualityType0 = CodeQualityType.StaticAnalysis;
      codeQualityCreateRequest0.setType(codeQualityType0);
      CodeQualityType codeQualityType1 = codeQualityCreateRequest0.getType();
      assertEquals(CodeQualityType.StaticAnalysis, codeQualityType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setToolName("");
      String string0 = codeQualityCreateRequest0.getToolName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setTimestamp(670L);
      long long0 = codeQualityCreateRequest0.getTimestamp();
      assertEquals(670L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setTimestamp((-1L));
      long long0 = codeQualityCreateRequest0.getTimestamp();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setServerUrl("^+8=c4sY5~] ");
      String string0 = codeQualityCreateRequest0.getServerUrl();
      assertEquals("^+8=c4sY5~] ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setServerUrl("");
      String string0 = codeQualityCreateRequest0.getServerUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setProjectVersion("4OsG4~h>CQkZEwL");
      String string0 = codeQualityCreateRequest0.getProjectVersion();
      assertEquals("4OsG4~h>CQkZEwL", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setProjectVersion("");
      String string0 = codeQualityCreateRequest0.getProjectVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setProjectUrl("");
      String string0 = codeQualityCreateRequest0.getProjectUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setProjectName(";T(TdLYRDE_ib");
      String string0 = codeQualityCreateRequest0.getProjectName();
      assertEquals(";T(TdLYRDE_ib", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setProjectName("");
      String string0 = codeQualityCreateRequest0.getProjectName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setProjectId("");
      String string0 = codeQualityCreateRequest0.getProjectId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setNiceName("");
      String string0 = codeQualityCreateRequest0.getNiceName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setHygieiaId("");
      String string0 = codeQualityCreateRequest0.getHygieiaId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      List<CodeQualityMetric> list0 = codeQualityCreateRequest0.getMetrics();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      String string0 = codeQualityCreateRequest0.getProjectName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      String string0 = codeQualityCreateRequest0.getNiceName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setProjectId("FnfreformRanc");
      String string0 = codeQualityCreateRequest0.getProjectId();
      assertEquals("FnfreformRanc", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      String string0 = codeQualityCreateRequest0.getProjectVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      String string0 = codeQualityCreateRequest0.getProjectUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setHygieiaId("FnfreformRanc");
      String string0 = codeQualityCreateRequest0.getHygieiaId();
      assertEquals("FnfreformRanc", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setProjectUrl("FnfreformRanc");
      String string0 = codeQualityCreateRequest0.getProjectUrl();
      assertEquals("FnfreformRanc", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      long long0 = codeQualityCreateRequest0.getTimestamp();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.getType();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setNiceName("FnfreformRanc");
      String string0 = codeQualityCreateRequest0.getNiceName();
      assertEquals("FnfreformRanc", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      String string0 = codeQualityCreateRequest0.getServerUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      String string0 = codeQualityCreateRequest0.getProjectId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      String string0 = codeQualityCreateRequest0.getHygieiaId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      codeQualityCreateRequest0.setToolName("FnfreformRanc");
      String string0 = codeQualityCreateRequest0.getToolName();
      assertEquals("FnfreformRanc", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CodeQualityCreateRequest codeQualityCreateRequest0 = new CodeQualityCreateRequest();
      String string0 = codeQualityCreateRequest0.getToolName();
      assertNull(string0);
  }
}
