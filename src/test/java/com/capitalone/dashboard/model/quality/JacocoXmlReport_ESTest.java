/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 01 10:04:28 GMT 2020
 */

package com.capitalone.dashboard.model.quality;

import org.junit.Test;
import static org.junit.Assert.*;
import com.capitalone.dashboard.model.quality.JacocoXmlReport;
import com.capitalone.dashboard.model.quality.QualityVisitor;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;

public class JacocoXmlReport_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JacocoXmlReport jacocoXmlReport0 = new JacocoXmlReport();
      LinkedList<JacocoXmlReport.Counter> linkedList0 = new LinkedList<JacocoXmlReport.Counter>();
      jacocoXmlReport0.setCounters(linkedList0);
      List<JacocoXmlReport.Counter> list0 = jacocoXmlReport0.getCounters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JacocoXmlReport jacocoXmlReport0 = new JacocoXmlReport();
      LinkedList<JacocoXmlReport.Counter> linkedList0 = new LinkedList<JacocoXmlReport.Counter>();
      jacocoXmlReport0.setCounters(linkedList0);
      JacocoXmlReport.Counter jacocoXmlReport_Counter0 = new JacocoXmlReport.Counter();
      linkedList0.offerLast(jacocoXmlReport_Counter0);
      List<JacocoXmlReport.Counter> list0 = jacocoXmlReport0.getCounters();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JacocoXmlReport jacocoXmlReport0 = new JacocoXmlReport();
      // Undeclared exception!
      try { 
        jacocoXmlReport0.accept((QualityVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.capitalone.dashboard.model.quality.JacocoXmlReport", e);
      }
  }

  private void verifyException(String string, NullPointerException e) {
	// TODO Auto-generated method stub
	
}

@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JacocoXmlReport.Counter jacocoXmlReport_Counter0 = new JacocoXmlReport.Counter();
      int int0 = jacocoXmlReport_Counter0.getCovered();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JacocoXmlReport.Counter jacocoXmlReport_Counter0 = new JacocoXmlReport.Counter();
      jacocoXmlReport_Counter0.setCovered((-16));
      assertEquals((-16), jacocoXmlReport_Counter0.getCovered());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JacocoXmlReport.Counter jacocoXmlReport_Counter0 = new JacocoXmlReport.Counter();
      int int0 = jacocoXmlReport_Counter0.getMissed();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JacocoXmlReport.Counter jacocoXmlReport_Counter0 = new JacocoXmlReport.Counter();
      jacocoXmlReport_Counter0.setMissed((-16));
      assertEquals((-16), jacocoXmlReport_Counter0.getMissed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JacocoXmlReport.Counter jacocoXmlReport_Counter0 = new JacocoXmlReport.Counter();
      jacocoXmlReport_Counter0.getType();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JacocoXmlReport.Counter jacocoXmlReport_Counter0 = new JacocoXmlReport.Counter();
      jacocoXmlReport_Counter0.setType((JacocoXmlReport.CounterType) null);
      assertEquals(0, jacocoXmlReport_Counter0.getCovered());
  }

	/*
	 * @Test(timeout = 4000) public void test09() throws Throwable { JacocoXmlReport
	 * jacocoXmlReport0 = new JacocoXmlReport(); QualityVisitor<Object>
	 * qualityVisitor0 = (QualityVisitor<Object>) mock(QualityVisitor.class, new
	 * ViolatedAssumptionAnswer()); jacocoXmlReport0.accept(qualityVisitor0); }
	 */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JacocoXmlReport jacocoXmlReport0 = new JacocoXmlReport();
      List<JacocoXmlReport.Counter> list0 = jacocoXmlReport0.getCounters();
      assertNull(list0);
  }
}
